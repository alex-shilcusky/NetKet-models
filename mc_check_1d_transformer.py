#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jul 23 11:49:47 2024

@author: ashilcusky
"""

import time
import math
import numpy as np
from numpy import exp, sqrt
from matplotlib import pyplot as pl
import itertools


def get_log_coeff(state, Q, K, V, W):
    N = len(W[0,:])
    L = len(Q[0,:])
    Nc = N // L
    
    xlist = state.reshape(Nc, L)

    Qx = np.matmul(xlist, Q.T)
    Kx = np.matmul(xlist, K.T)
    Vx = np.matmul(xlist, V.T)

    z = np.matmul(Qx, Kx.T) / np.sqrt(L) 

    alist = np.zeros(Nc, dtype=np.cfloat)
    for I in range(Nc):
        num = np.exp(-z[I,I])

        denom = 0
        for J in range(Nc):
            denom += np.exp(-z[I,J])

        alist[I] = num / denom

    vtilde = (alist[:, np.newaxis] * Vx).reshape(N) 
    return vtilde.T @ W @ vtilde


def get_eL(state, coeff, Q,K,V,W):
    N = len(state)
    E1 = 0
    E2 = 0 
    for i in range(N):
        E1 += state[i]*state[(i+1)%N]

        if (state[i]*state[(i+1)%N] < 0):
            state_new = state.copy()
            state_new[i] *= -1
            state_new[(i+1)%N] *= -1
            x_new = get_log_coeff(state_new, Q,K,V,W)
            
            coeff_new = np.exp(x_new)
            # coeff_new = x_new
            
            E2 += coeff_new / coeff 
    return E1 + 0.5 * E2 # (+) is normal coeff, (-) is Marshall sign


def get_E_mc(Nsample, Q,K,V,W ):
    L = len(W[0,:])
    b = len(Q[0,:])
    E_avg = 0.0

    
    EE = []
    
    state = np.ones(L)
    state[:L//2] = -1
    # state *= 0.5
    state = state[np.random.permutation(L)]

    
    for i in range(Nsample):
        for j in range(3):
            x = np.random.randint(low=0,high=L)
            y=x
            while(state[y]*state[x] > 0):
                y = np.random.randint(low=0,high=L)
            new_state = state.copy()
            new_state[x] *= -1
            new_state[y] *= -1
            
            x = get_log_coeff(state,Q,K,V,W)
            coeff = np.exp(x)
            # coeff = x
            
            x_new = get_log_coeff(new_state,Q,K,V,W)
            coeff_new = np.exp(x_new)
            # coeff_new = x_new
            
            if (np.random.random() < min(1.0, np.abs(coeff_new/coeff)**2)):
                state = new_state.copy()
                coeff = coeff_new

            
        tmp_energy = get_eL(state,coeff, Q,K,V,W)
        tmp_energy = np.conj(tmp_energy)
        
        E_avg += tmp_energy 
        # EE.append(energy_sum/(i+1))
        EE.append(tmp_energy)
        # print(energy_sum/(i+1))
        
    E_avg /= Nsample
    
    if 1:
        pl.figure()
        pl.plot(EE)
        pl.show()
    # print('\n Time spent cycling through states: ', t_reps)
    
    return E_avg, EE

L = 12
b = 2

Nsample = 3000


Q = np.random.normal(scale=0.01, size=(b,b)) + 1j*np.random.normal(scale=0.01, size=(b,b))
K = np.random.normal(scale=0.01, size=(b,b)) + 1j*np.random.normal(scale=0.01, size=(b,b))
V = np.random.normal(scale=0.01, size=(b,b)) + 1j*np.random.normal(scale=0.01, size=(b,b))
W = np.random.normal(scale=0.01, size=(L,L)) + 1j*np.random.normal(scale=0.01, size=(L,L))
# print(Q)


# Q = np.array([[ 0.02005175+0.01032422j, -0.01471526-0.02411442j], 
#   [ 0.01344193-0.01487419j,  0.00854999+0.01529613j]])

# K = np.array([[ 0.01146297-0.0219287j,  -0.01963781+0.00876793j],
#   [-0.00593747+0.01606288j, -0.01215244-0.01650918j]])

# V = np.array([[-2.28863411+1.32377667j,  0.03062291-0.6798817j ],
#   [-0.37633789+1.96865891j , 0.1990404 +3.24333933j]])

# W = np.array(
#   [[-8.36687260e-02+0.00748656j,  1.05249357e-01-0.27048759j,
#     5.06225856e-03+0.20225554j, -1.32705707e-01+0.18799457j,
#     5.73280344e-02+0.09299212j, -6.44946280e-02+0.19928493j,
#     7.57642836e-02+0.08318043j, -1.41489127e-02+0.1698283j,
#     6.16657318e-02+0.08931232j,  6.22597680e-02+0.02575325j,
#     7.32620193e-03+0.19822524j,  3.53610856e-01-0.42013754j],
#   [ 1.00987760e-01-0.27423101j,  6.06666708e-01-0.06076322j,
#     3.51440970e-01-0.41176517j,  1.34591705e-01-0.03678229j,
#     6.88207937e-02+0.02193543j, -2.69198985e-01+0.0180727j,
#   -1.84230103e-02+0.16308346j, -3.89218612e-01+0.00923439j,
#   -7.68969394e-02+0.20448488j, -2.87850116e-01+0.00628138j,
#   -1.34395032e-01+0.17981362j,  1.45641860e-01-0.04824363j],
#   [ 3.85062606e-03+0.19797202j,  3.61889682e-01-0.4240394j,
#   -9.29151711e-02+0.01111987j,  1.05653413e-01-0.27888828j,
#     4.22965809e-03+0.20776972j, -1.39864665e-01+0.18358912j,
#     5.19505902e-02+0.08066591j, -7.27053721e-02+0.20336511j,
#     7.19451789e-02+0.07385313j, -2.94285378e-02+0.17313755j,
#     6.26870622e-02+0.08636007j,  7.01039599e-02+0.03138456j],
#   [-1.45884227e-01+0.19327068j,  1.40265392e-01-0.05371162j,
#     1.10735631e-01-0.2756111j ,  5.88294143e-01-0.06545646j,
#     3.44950065e-01-0.42068818j,  1.38331366e-01-0.04545201j,
#     7.18920968e-02+0.00787883j, -2.83793019e-01+0.00480272j,
#   -1.65628693e-02+0.14773696j, -3.88635986e-01+0.01413959j,
#   -6.84651847e-02+0.19921415j, -2.80818059e-01+0.00950119j],
#   [ 6.51033753e-02+0.07986521j,  6.83120044e-02+0.02538205j,
#     2.82272245e-03+0.19284851j,  3.63390116e-01-0.41835198j,
#   -8.90364591e-02+0.003184j  ,  1.02913233e-01-0.28131153j,
#   -9.73345791e-04+0.20730953j, -1.45063238e-01+0.19053195j,
#     6.23841885e-02+0.08884385j, -6.88084669e-02+0.20530768j,
#     8.51151195e-02+0.08367294j, -2.10937283e-02+0.16558108j],
#   [-8.16425370e-02+0.20291438j, -2.81832783e-01-0.00164047j,
#   -1.32867704e-01+0.19404677j,  1.45111199e-01-0.04105992j,
#     1.08803812e-01-0.2736604j ,  6.09561291e-01-0.05909811j,
#     3.65030627e-01-0.43786591j,  1.42013027e-01-0.04300971j,
#     7.24738840e-02+0.02448041j, -2.81319367e-01+0.00761531j,
#   -2.35546679e-02+0.15825638j, -3.89622340e-01+0.01771068j],
#   [ 7.86587394e-02+0.07390776j, -2.02160108e-02+0.15625787j,
#     6.79400561e-02+0.08720782j,  6.75517453e-02+0.03550168j,
#     3.27091713e-03+0.19077868j,  3.54506729e-01-0.41361213j,
#   -8.63437450e-02+0.0082978j ,  1.02815904e-01-0.26823173j,
#     1.88324296e-04+0.19980761j, -1.44129967e-01+0.19196637j,
#     4.80886332e-02+0.07490981j, -6.26697220e-02+0.20376532j],
#   [-2.59495670e-02+0.1632913j , -3.77478741e-01+0.02900541j,
#   -6.91813416e-02+0.20141254j, -2.82974713e-01+0.01188872j,
#   -1.32070427e-01+0.18984114j,  1.39110696e-01-0.03415478j,
#     1.12771150e-01-0.26193846j,  6.03300440e-01-0.06050493j,
#     3.72329378e-01-0.4189841j ,  1.36553593e-01-0.03439962j,
#     6.75222534e-02+0.02610254j, -2.81380151e-01+0.00187509j],
#   [ 5.92575887e-02+0.08196757j, -6.80922749e-02+0.1890949j,
#     8.13472431e-02+0.08009311j, -2.33657729e-02+0.17315418j,
#     5.68811934e-02+0.08262963j,  7.10668674e-02+0.01654808j,
#     2.68503791e-03+0.19744477j,  3.42462654e-01-0.42086623j,
#   -8.58628857e-02+0.01192435j,  1.04139720e-01-0.27663619j,
#     1.62447670e-03+0.1957917j , -1.39956205e-01+0.18231241j],
#   [ 7.31355433e-02+0.03008828j, -2.74698448e-01+0.00522048j,
#   -9.88873811e-03+0.15751526j, -3.90188830e-01+0.01176739j,
#   -8.22523775e-02+0.19902163j, -2.80591590e-01+0.00748091j,
#   -1.34333758e-01+0.18546899j,  1.30475769e-01-0.04612711j,
#     1.04143062e-01-0.26854047j,  5.98904010e-01-0.0627263j,
#     3.59916696e-01-0.4159179j ,  1.33404610e-01-0.0436396j ],
#   [-2.57407012e-03+0.20266601j, -1.46292617e-01+0.19371742j,
#     5.92601176e-02+0.08587437j, -8.50588744e-02+0.20144289j,
#     6.80503902e-02+0.07477649j, -2.03737912e-02+0.16591588j,
#     7.15405858e-02+0.09917298j,  6.85850865e-02+0.02620086j,
#     1.09150492e-03+0.20494185j,  3.46345363e-01-0.42220591j,
#   -6.77633005e-02+0.00524551j,  9.74611796e-02-0.27542462j],
#   [ 3.56606536e-01-0.41649558j,  1.29768440e-01-0.04395055j,
#     6.72234617e-02+0.02371653j, -2.89566197e-01-0.00336684j,
#   -2.38224291e-02+0.16240573j, -3.79847960e-01+0.01293157j,
#   -8.58923633e-02+0.19577019j, -2.90265592e-01+0.01482286j,
#   -1.37835576e-01+0.19202722j,  1.32026460e-01-0.04905203j,
#     1.09739786e-01-0.28247275j,  5.96609561e-01-0.061001j  ]])

E, EE = get_E_mc(3000, Q, K, V,W)

E_avg_arr = np.ones(Nsample)*E


sig_sq = np.sum(np.square(EE - E_avg_arr))/Nsample
# sig_sq = 

print('E = ', E)
print('sig^2 = ', sig_sq)
# print('E/L = ', E/L)